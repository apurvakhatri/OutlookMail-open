from django.shortcuts import render
from yellowant import YellowAnt
from django.http import HttpResponseRedirect, HttpResponse
from django.conf import settings
from urllib.parse import quote, urlencode
import requests
from django.contrib.auth.models import User
import json, uuid
from records.models import YellowUserToken, YellowAntRedirectState, AppRedirectState
from django.views.decorators.csrf import csrf_exempt
from records.YellowantCommandCenter import CommandCenter
import traceback
import time

scopes = [ 'openid',
           'User.Read',
           'Mail.Read' ,
           'offline_access',
           'Calendars.Read',
           'Contacts.Read',
           'Mail.ReadWrite',
           'Mail.Send']

authority = 'https://login.microsoftonline.com'
authorize_url = '{0}{1}'.format(authority, '/common/oauth2/v2.0/authorize?{0}')
token_url = '{0}{1}'.format(authority, '/common/oauth2/v2.0/token')
graph_endpoint = 'https://graph.microsoft.com/v1.0{0}'

def redirectToYellowAntAuthenticationPage(request):
    # This is the first redirect. It is specified in YellowAnt API Documentation.
    # The YA_OUTH_URL will shown a page, where the user can choose a team account to authenticate
    # After clicking on 'authorize' the user will be taken to YA_REDIRECT_URL along with YA_CLIENT_ID.
    print("In redirectToYellowAntAuthenticationPage")
    user = User.objects.get(id=request.user.id)
    state = str(uuid.uuid4())
    YellowAntRedirectState.objects.create(user=user, state=state)
    return HttpResponseRedirect(
        "{}?state={}&client_id={}&response_type=code&redirect_url={}".format(settings.YA_OAUTH_URL, state, settings.YA_CLIENT_ID,
                                                                    settings.YA_REDIRECT_URL))

def yellowantredirecturl(request):
    # The code is extracted from request URL and it is used to get access token json.
    # The YA_REDIRECT_URL point to this function only
    print("In yellowantredirecturl")
    code = request.GET.get('code')
    state = request.GET.get("state")
    yellowant_redirect_state = YellowAntRedirectState.objects.get(state = state)
    user = yellowant_redirect_state.user

    y = YellowAnt(app_key=settings.YA_CLIENT_ID, app_secret=settings.YA_CLIENT_SECRET,
                  access_token=None,
                  redirect_uri=settings.YA_REDIRECT_URL)
    access_token_dict = y.get_access_token(code)
    print(access_token_dict)
    access_token = access_token_dict['access_token']
    yellowant_user = YellowAnt(access_token=access_token)
    profile = yellowant_user.get_user_profile()
    user_integration = yellowant_user.create_user_integration()
    ut = YellowUserToken.objects.create(user=user, yellowant_token=access_token, yellowant_id=profile['id'],
                                        yellowant_integration_invoke_name=user_integration["user_invoke_name"],
                                        yellowant_intergration_id=user_integration['user_application']
                                        )

    return HttpResponseRedirect("/integrate_app?id={}".format(str(ut.id)))

def integrate_app_account(request):
    print("In integrate_app_account")
    ut_id = request.GET.get("id")
    print(ut_id)
    ut = YellowUserToken.objects.get(id = ut_id)
    state = str(uuid.uuid4())
    AppRedirectState.objects.create(user_integration = ut, state = state)

    url = ('{}?state={}'.format(settings.OUTLOOK_REDIRECT_URL, state))

    return HttpResponseRedirect(url)


def get_signin_url(request):

  # Build the query parameters for the signin url
  # The redirect_uri in the params define the that once the sign up page is loaded and the user signs in, the user will
  # then be redirected to the redirect_uri stated. This redirect_uri takes this function to gettoken function.
  print("In get_signin_url")
  state = request.GET.get("state")
  params = { 'client_id': settings.OUTLOOK_CLIENT_ID,
             'redirect_uri': settings.OUTLOOK_REDIRECT,
             'response_type': 'code',
             'scope': ' '.join(str(i) for i in scopes ),
             'state': state
            }

  signin_url = authorize_url.format(urlencode(params))
  print(signin_url)
  return HttpResponseRedirect(signin_url)


def gettoken(request):
    # Here we only get the auth_code. This code exchanged with Auth Token
    print("In gettoken")

    auth_code = request.GET['code']
    state = request.GET.get("state")
    AR = AppRedirectState.objects.get(state = state)
    ut = AR.user_integration
    print (auth_code)
    # Make a request to outlook for the access_token.
    post_data = {'grant_type': 'authorization_code',
                 'code': auth_code,
                 'redirect_uri': settings.OUTLOOK_REDIRECT,
                 'scope': ' '.join(str(i) for i in scopes),
                 'client_id': settings.OUTLOOK_CLIENT_ID,
                 'client_secret': settings.OUTLOOK_CLIENT_SECRET
                 }

    r = requests.post(token_url, data=post_data)
    # The response will contain token_type, scope, expires_in, ext_expires_in, access_token, refresh_token, id_token
    print(r.json())
    access_token_dict = r.json()
    # Now we are collecting the variables
    access_token = access_token_dict["access_token"]
    refresh_token = access_token_dict["refresh_token"]
    expires_in = access_token_dict['expires_in']
    expiration = int(time.time()) + expires_in - 300
    # Saving the access_token, refresh_token, token_expires in sessions.
    request.session['access_token'] = access_token
    request.session['refresh_token'] = refresh_token
    request.session['token_expires'] = expiration

    # Now we make another request using the refresh token
    post_data_refresh = {'grant_type': 'refresh_token',
                 'refresh_token': refresh_token,
                 'redirect_uri': settings.OUTLOOK_REDIRECT,
                 'scope': ' '.join(str(i) for i in scopes),
                 'client_id': settings.OUTLOOK_CLIENT_ID,
                 'client_secret': settings.OUTLOOK_CLIENT_SECRET
                 }
    r = requests.post(token_url, data=post_data_refresh)

    # Since we had saved acceess_token in sessions, we again ask for access_token, expiration from sessions.
    current_token = request.session['access_token']
    expiration = request.session['token_expires']
    # We get the current time
    now = int(time.time())


    if (current_token and now < expiration):
        # Token still valid
        print("Access token is current_token")

        # webhook_url = graph_endpoint.format('/subscriptions')
        # data = {
        #     "changeType": "created,updated",
        #     "notificationUrl": settings.BASE_URL,
        #     "resource": "/me/mailfolders('inbox')/messages",
        #     "expirationDateTime": "2016-03-20T11:00:00.0000000Z",
        #     "clientState": settings.OUTLOOK_CLIENT_SECRET
        # }
        ut = YellowUserToken.objects.filter(id=ut.id).update(outlook_access_token=current_token)
        return HttpResponse(' Access token: {0}'.format(current_token))
    else:
        # Token expired
        refresh_token = request.session['refresh_token']
        new_tokens = get_token_from_refresh_token(refresh_token, redirect_uri)

        # Update session
        # expires_in is in seconds
        # Get current timestamp (seconds since Unix Epoch) and
        # add expires_in to get expiration time
        # Subtract 5 minutes to allow for clock differences
        expiration = int(time.time()) + new_tokens['expires_in'] - 300

        # Save the token in the session
        request.session['access_token'] = new_tokens['access_token']
        request.session['refresh_token'] = new_tokens['refresh_token']
        request.session['token_expires'] = expiration

        print("New token is")
        ut = YellowUserToken.objects.filter(id=ut.id).update(outlook_access_token=new_tokens['access_token'])
        return HttpResponse(' Access token: {0}'.format(new_tokens['access_token']))






@csrf_exempt
def yellowant_api(request):
    print("In yellowant_api")
    try:
        data = json.loads(request.POST['data'])
        print(data)
        verification_token = data["verification_token"]
        print(data["args"])
        if verification_token == settings.YA_VERIFICATION_TOKEN:
            print("Token verified and command is sent")
            cc = CommandCenter(data["user"], data["application"], data["function_name"], data["args"])
            print("Sent")
            return HttpResponse(cc.parse())
        else:
            return HttpResponse(status = 403)
    except Exception as e:
        print("In here")
        print(str(e))
        traceback.print_exc()
        return("Error occured")